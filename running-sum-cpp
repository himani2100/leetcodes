/*
Assuming that changes to the original vector is allowed.

We run a loop starting from position 1 (since 0 will has no changes or additions to it anyway.) And modify the given array as we iterated through it. 

This algorithm is O(n) and O(1) as it utilizes no extra space and is in-place
*/

#include <iostream>
#include <vector>

using namespace std;

class Solution 
{
public:
    vector<int> runningSum(vector<int>& nums) 
    {
        for(int i = 1; i < nums.size(); i++)
        {
            nums[i] = nums[i] + nums[i-1];
            cout << nums[i] << " ";
        }
        cout << "\n";
        return nums;
    }
};


int main()
{
    Solution obj;
    vector<int> nums = {1,2,3,4};
    obj.runningSum(nums);
    return 0;
}

